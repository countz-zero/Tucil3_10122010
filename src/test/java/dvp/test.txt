@Before
    public void setUp() {
        Piece A = new Piece("A", 1, 3, 0, 0);
        Piece B = new Piece("B", 2, 1, 1, 0);
        Piece P = new Piece("P", 1, 2, 1, 1);
        pieces = new ArrayList<Piece>();
        pieces.add(P);
        pieces.add(A);
        pieces.add(B);
    }

    @After
    public void teardown() {
        pieces.clear();
    }

    @Test
    public void invalidBoard()
    {
        thrown.expect(IllegalArgumentException.class);
        Board board = new Board(0, 1, pieces, new int[] {2, 1});
    }

    @Test
    public void findAndGetPCar()
    {
        pieces.remove(0);
        thrown.expect(IllegalArgumentException.class);
        thrown.expectMessage("Tidak ada mobil berlabel P");
        Board board = new Board(5, 5, pieces, new int[] {2, 1});
    }

    @Test
    public void exitAlignedTest()
    {
        thrown.expect(IllegalArgumentException.class);
        thrown.expectMessage("Puzzle tidak mungkin diselesaikan karena mobil P tidak bisa keluar");
        Board board = new Board(5, 5, pieces, new int[] {2, 2});
    }

    @Test 
    public void CarInFrontPTest() {
        pieces.remove(2);
        pieces.add(new Piece("B", 1, 2, 1, 3));
        thrown.expect(IllegalArgumentException.class);
        thrown.expectMessage("Ada mobil yang di depan mobil merah (P)");
        Board board = new Board(5, 5, pieces, new int[] {4, 1});
    }

    @Test
    //!Bakal ada update
    public void displayTest() {
        String correctOutput = String.join("\n", "AAA..", "BPP..", "B....", ".....", ".....");

        Board board = new Board(5, 5, pieces, new int[] {2, 1});
        board.displayBoard();
        assertEquals(true, true);
    }